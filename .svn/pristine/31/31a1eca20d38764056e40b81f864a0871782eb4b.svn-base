// Components, functions, plugins
import { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';
import { /*Modal,*/ ModalController, NavController, NavParams, LoadingController, AlertController } from '@ionic/angular';
import { LocalstorageService } from './../../services/localstorage.service';
import { ImageLoaderConfig } from 'ionic-image-loader';
import { DatabaseService } from './../../services/database.service';
import { Router } from '@angular/router';
import { ActivatedRoute } from '@angular/router';


@Component({
  selector: 'app-attendeesprofile',
  templateUrl: './attendeesprofile.page.html',
  styleUrls: ['./attendeesprofile.page.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class AttendeesProfilePage implements OnInit {

	public visualImageURL: string;
	public showProfileImage: boolean;
	public showTextAvatar: boolean;
	
	// Attendee ProfilePage
	public prAttendeeName: string;
	public prAttendeeTitle: string;
	public prAttendeeOrganization: string;
	public prConversationAttendeeID: string;
	
	// Social Media icons
	public statusTwitter: string;
	public statusFacebook: string;
	public statusLinkedIn: string;
	public statusInstagram: string;
	public statusPinterest: string;
	public showTwitter: boolean;
	public showFacebook: boolean;
	public showLinkedIn: boolean;
	public showInstagram: boolean;
	public showPinterest: boolean;
	
	public smURLTwitter: string;
	public smURLFacebook: string;
	public smURLLinkedIn: string;
	public smURLInstagram: string;
	public smURLPinterest: string;
	
	// Bookmark button
	public visBookmarkAddRemoveButton: string;
	public btnBookmarkManagement = false;
	
	constructor(public navCtrl: NavController, 
				private databaseprovider: DatabaseService,
				public loadingCtrl: LoadingController,
				private alertCtrl: AlertController,
				private modal: ModalController,
				private router: Router,
				private route: ActivatedRoute,
				//private imageLoaderConfig: ImageLoaderConfig,
				private cd: ChangeDetectorRef,
				private localstorage: LocalstorageService) {
	}


	ionViewDidLoad() {
		console.log('ionViewDidLoad ProfilePage');
	}

	ngOnInit() {

		// Get AttendeeID
		var AttendeeID = this.localstorage.getLocalValue('AttendeeID');
		var oAttendeeID = this.localstorage.getLocalValue('oAttendeeID');
		this.prConversationAttendeeID = oAttendeeID;
		
		// Setup defaul tprofile image
		//this.imageLoaderConfig.setFallbackUrl('assets/img/personIcon.png');
		//this.imageLoaderConfig.enableFallbackAsPlaceholder(true);
		
		// Get profile image if available
		this.visualImageURL = "https://naeyc.convergence-us.com/AdminGateway/images/Attendees/" + oAttendeeID + '.jpg';
				
		this.cd.markForCheck();

		// Get profile data
		var flags = "pr|" + AttendeeID;
		
		this.databaseprovider.getDatabaseStats(flags, oAttendeeID).then(data => {

			if (data['length'] > 0) {

				console.log('getDatabaseStats: ' + JSON.stringify(data));
				
				// Display attendee information
				this.prAttendeeName = data[0].FirstName + " " + data[0].LastName;
				this.prAttendeeTitle = data[0].Title;
				this.prAttendeeOrganization = data[0].Company;
				
				// Set color indications for social media icons
				if(data[0].showTwitter == "Y") {
					this.statusTwitter = "black";
					this.smURLTwitter = data[0].smTwitter;
					this.showTwitter = true;
				} else {
					this.statusTwitter = "black";
					this.smURLTwitter = "";
					this.showTwitter = false;
				}
				if(data[0].showFacebook == "Y") {
					this.statusFacebook = "black";
					this.smURLFacebook = data[0].smFacebook;
					this.showFacebook = true;
				} else {
					this.statusFacebook = "black";
					this.smURLFacebook = "";
					this.showFacebook = false;
				}
				if(data[0].showLinkedIn == "Y") {
					this.statusLinkedIn = "black";
					this.smURLLinkedIn = data[0].smLinkedIn;
					this.showLinkedIn = true;
				} else {
					this.statusLinkedIn = "black";
					this.smURLLinkedIn = "";
					this.showLinkedIn = false;
				}
				if(data[0].showInstagram == "Y") {
					this.statusInstagram = "black";
					this.smURLInstagram = data[0].smInstagram;
					this.showInstagram = true;
				} else {
					this.statusInstagram = "#000";
					this.smURLInstagram = "";
					this.showInstagram = false;
				}
				if(data[0].showPinterest == "Y") {
					this.statusPinterest = "black";
					this.smURLPinterest = data[0].smPinterest;
					this.showPinterest = true;
				} else {
					this.statusPinterest = "black";
					this.smURLPinterest = "";
					this.showPinterest = false;
				}

                // Values for Bookmark Management
                this.localstorage.setLocalValue("BookmarkID", oAttendeeID);
                this.localstorage.setLocalValue("BookmarkType", "Attendees");

                if (data[0].Bookmarked != "0") {
                    this.visBookmarkAddRemoveButton = "Remove from Bookmarks";
                } else {
                    this.visBookmarkAddRemoveButton = "Add to Bookmarks";
                }
				
			}

			this.cd.markForCheck();
			
		}).catch(function () {
			console.log("Promise Rejected");
		});
		
        // -------------------
        // Get Attendee Status
        // -------------------
		console.log('Attendee Button Management, AttendeeID: ' + AttendeeID);
		if (AttendeeID == '0' || AttendeeID == '') {
			this.btnBookmarkManagement = false;
		} else {
			this.btnBookmarkManagement = true;
		}
		
	}

	StartContinueConversation(ConversationAttendeeName, ConversationAttendeeID) {

		var AttendeeID = this.localstorage.getLocalValue('AttendeeID');
		
		//if (AttendeeID != '900000' && AttendeeID != '900001' && AttendeeID != '21' && AttendeeID != '22') {
			
			// Alert for successful save
		//	let savealert = this.alertCtrl.create({
		//		title: 'Conversations',
		//		subTitle: 'The direct chat feature is not available at this time.',
		//		buttons: ['Ok']
		//	});
			
		//	savealert.present();

		//} else {

			this.localstorage.setLocalValue('ConversationAttendeeName', ConversationAttendeeName);
			this.localstorage.setLocalValue('ConversationAttendeeID', ConversationAttendeeID);
			this.navCtrl.navigateForward('/conversation/' + ConversationAttendeeID);
			
		//}

	}

	viewSocialMedia(smURL) {
		
		if (smURL != "") {
			console.log('Attendee Profile Details: Navigating to: ' + smURL);
            window.open(smURL, '_system');
		}

	}

	async presentBookmarkAddAlert() {
		const alert = await this.alertCtrl.create({
			header: 'Bookmarks',
			message: 'Unable to add the item to your bookmark list at this time. Please try again shortly.',
			buttons: ['OK']
		});

		await alert.present();
	}

	async presentBookmarkRemoveAlert() {
		const alert = await this.alertCtrl.create({
			header: 'Bookmarks',
			message: 'Unable to remove the item from your bookmark list at this time. Please try again shortly.',
			buttons: ['OK']
		});

		await alert.present();
	}
			
    BookmarkManagement() {
		
		console.log("Begin BookmarkManagement process...");

		var AttendeeID = this.localstorage.getLocalValue('AttendeeID');

        var BookmarkType = this.localstorage.getLocalValue("BookmarkType");
        var BookmarkID = this.localstorage.getLocalValue("BookmarkID");

		var flags = '';
		
		// Starting variables
		console.log("AttendeeID: " + AttendeeID);
		console.log("BookmarkType: " + BookmarkType);
		console.log("BookmarkID: " + BookmarkID);

		this.cd.markForCheck();

        // Get last update performed by this app
        var LastUpdateDate = this.localstorage.getLocalValue("LastUpdateDate");
        if (LastUpdateDate == null) {
            // If never, then set variable and localStorage item to NA
			LastUpdateDate = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '')
            this.localstorage.setLocalValue("LastUpdateDate", LastUpdateDate);
        }

        if (this.visBookmarkAddRemoveButton == "Add to Bookmarks") {

            // ------------------------
            // Add item to Bookmarks List
            // ------------------------
			flags = 'cb|0|' + BookmarkType + '|' + BookmarkID;
			console.log("flags: " + flags);
			
			this.databaseprovider.getBookmarksData(flags, AttendeeID).then(data => {
				
				console.log("getBookmarksData: " + JSON.stringify(data));

				if (data['length']>0) {

                    console.log("Return status: " + data[0].Status);

					if (data[0].Status == "Saved") {
						
						this.visBookmarkAddRemoveButton = "Remove from Bookmarks";
						this.cd.markForCheck();
						
					} else {
						
						console.log("Return query: " + data[0].Query);
						
						this.presentBookmarkAddAlert()						;

					}
					
				}

			}).catch(function () {
				console.log("Promise Rejected");
			});
			
        } else {

            // -----------------------
            // Remove Item from Bookmarks List
            // -----------------------
			flags = 'rb|0|' + BookmarkType + '|' + BookmarkID;
			console.log("flags: " + flags);
			
			this.databaseprovider.getBookmarksData(flags, AttendeeID).then(data => {
				
				console.log("getBookmarksData: " + JSON.stringify(data));

				if (data['length']>0) {

                    console.log("Return status: " + data[0].Status);

					if (data[0].Status == "Saved") {
						
						this.visBookmarkAddRemoveButton = "Add to Bookmarks";
						this.cd.markForCheck();
						
					} else {
						
						console.log("Return query: " + data[0].Query);
						
						this.presentBookmarkRemoveAlert();
						
					}
					
				}

			}).catch(function () {
				console.log("Promise Rejected");
			});

        }

    };

}

